plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}
apply plugin: 'application'
apply plugin: 'groovy'

group = 'com.sourceplusplus.core'
applicationName = 'source-core'
archivesBaseName = 'source-core'
mainClassName = 'com.sourceplusplus.core.CoreBootstrap'

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.5.11'
    implementation project(":api")
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.13.3'
    implementation group: 'io.vertx', name: 'vertx-dropwizard-metrics', version: "$VERTX_VERSION"
    implementation group: 'io.vertx', name: 'vertx-web-client', version: "$VERTX_VERSION"
    implementation "io.vertx:vertx-auth-jwt:$VERTX_VERSION"
//    implementation "io.vertx:vertx-web:$VERTX_VERSION"
    implementation files('../3rd_party/vertx/vertx-web-3.9.1.jar')
    implementation "io.vertx:vertx-tcp-eventbus-bridge:$VERTX_VERSION"
    implementation "io.vertx:vertx-jdbc-client:$VERTX_VERSION"
    implementation group: 'io.searchbox', name: 'jest', version: '6.3.1'
    implementation group: 'net.jodah', name: 'expiringmap', version: '0.5.9'
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
}

configurations {
    compile.exclude module: 'jackson-module-scala_2.10'
    compile.exclude module: 'log4j-over-slf4j'
}

test {
    filter {
        includeTestsMatching "com.sourceplusplus.core.*"
    }

    if (System.getenv("TRAVIS_BRANCH") != null || project.hasProperty("run_integration_tests")) {
        jvmArgs '-javaagent:' + new File(projectDir, "../3rd_party/skywalking/apache-skywalking-apm-bin/agent/skywalking-agent.jar")

        filter {
            includeTestsMatching "test.integration.*"
        }
    }

    dependsOn "buildAndMove", "startDocker"
    finalizedBy "stopDocker"
}

task runCore {
    dependsOn "startDocker"

    doLast {
        file("docker/local/source-core-" + version + ".zip").delete()
        file("../docker/local/source-core-" + version + ".zip").delete()
    }
}

task buildAndMove {
    dependsOn ":core:distZip"
    doLast {
        java.nio.file.Files.copy(
                file("../core/build/distributions/source-core-" + version + ".zip").toPath(),
                file("../docker/local/source-core-" + version + ".zip").toPath(),
                java.nio.file.StandardCopyOption.REPLACE_EXISTING,
                java.nio.file.StandardCopyOption.COPY_ATTRIBUTES)

        //setup monitoring
        def skywalkingArchive = new File(projectDir, '../3rd_party/skywalking/apache-skywalking-apm-7.0.0.tar.gz')
        copy {
            from tarTree(resources.gzip(skywalkingArchive.getAbsolutePath()))
            into new File(projectDir, "../docker/local/")
        }

        //todo: temp; add as PR to skywalking
        java.nio.file.Files.copy(new File(projectDir, "../3rd_party/skywalking/apm-customize-enhance-plugin-7.0.0.jar").toPath(),
                new File(projectDir, "../docker/local/apache-skywalking-apm-bin/agent/plugins/apm-customize-enhance-plugin-7.0.0.jar").toPath(),
                java.nio.file.StandardCopyOption.REPLACE_EXISTING)

    }
}

task startDocker {
    dependsOn ":composeUp"
    doFirst {
        file("docker/local/source-core-" + version + ".zip").delete()
        file("../docker/local/source-core-" + version + ".zip").delete()
    }
}
startDocker.mustRunAfter buildAndMove

task stopDocker {
    dependsOn ":composeDown"
    doLast {
        file("docker/local/source-core-" + version + ".zip").delete()
        file("../docker/local/source-core-" + version + ".zip").delete()
    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/source-core_build.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['build_date'] = new Date().toInstant().toString()
            p.store w, null
        }
    }
}
classes {
    dependsOn createProperties
}

test.doFirst {
    if (System.getenv("TRAVIS_BRANCH") != null || project.hasProperty("run_integration_tests")) {
        def skywalkingArchive = new File(projectDir, '../3rd_party/skywalking/apache-skywalking-apm-7.0.0.tar.gz')
        copy {
            from tarTree(resources.gzip(skywalkingArchive.getAbsolutePath()))
            into skywalkingArchive.parentFile
        }

        //todo: temp; add as PR to skywalking
        java.nio.file.Files.copy(new File(skywalkingArchive.parentFile, "apm-customize-enhance-plugin-7.0.0.jar").toPath(),
                new File(skywalkingArchive.parentFile, "apache-skywalking-apm-bin/agent/plugins/apm-customize-enhance-plugin-7.0.0.jar").toPath(),
                java.nio.file.StandardCopyOption.REPLACE_EXISTING)

        PrintWriter output = new PrintWriter(new FileWriter(
                new File(skywalkingArchive.parentFile, "apache-skywalking-apm-bin/agent/config/agent.config"), true))
        output.println("\nplugin.customize.enhance_file=" + new File(projectDir, "/src/test/resources/customize_enhance.xml"))
        output.close()
    }
}

shadowJar {
    dependencies {
        exclude(dependency('org.apache.logging.log4j:log4j-slf4j-impl'))
    }
}