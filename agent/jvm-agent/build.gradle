import java.nio.file.*
import java.nio.file.attribute.BasicFileAttributes

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.3.3'
    }
}

group = 'com.sourceplusplus.agent'
archivesBaseName = 'source-agent'

dependencies {
    testCompile group: 'com.ea.agentloader', name: 'ea-agent-loader', version: '1.0.3'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
    testCompile group: 'io.opentracing', name: 'opentracing-api', version: '0.30.0'

    compile project(":api")
    compile files('../lib/skywalking-agent.jar')
    compile group: 'org.tinylog', name: 'tinylog', version: '1.3.2'
    compile group: 'org.ow2.asm', name: 'asm', version: '5.2'
    compile group: 'org.ow2.asm', name: 'asm-commons', version: '5.2'
    compile(group: 'org.mutabilitydetector', name: 'asm-nonclassloadingextensions', version: '1.0-rc1') {
        exclude group: 'org.ow2.asm', module: 'asm-debug-all'
    }
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.2'
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/source-agent_build.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p['apache_skywalking_version'] = project.APACHE_SKYWALKING_VERSION.toString()
            p['build_date'] = new Date().toInstant().toString()
            p.store w, null
        }
    }
}
classes {
    dependsOn createProperties
}

task prepareAgent(type: Jar, dependsOn: ['compileJava']) {
    mustRunAfter "jar"
    inputs.files(sourceSets.main.allSource, configurations.runtime.asFileTree.files)
    outputs.file file("build/libs/source-agent-$version" + "_prepare.jar")

    archiveName = "source-agent-$version" + "_prepare.jar"
    from files(sourceSets.main.output)
    from(configurations.runtime.asFileTree.files.collect { zipTree(it) })

    manifest {
        attributes 'Premain-Class': 'com.sourceplusplus.agent.SourceAgent'
        attributes 'Can-Redefine-Classes': 'true'
        attributes 'Can-Retransform-Classes': 'true'
    }
}

task prepareExternalAgent(type: JavaExec) {
    dependsOn "prepareAgent"
    inputs.file file("build/libs/source-agent-$version" + "_prepare.jar")
    outputs.file file("build/libs/source-agent-$version" + "_prepare_external.jar")

    doFirst {
        file("build/libs/source-agent-$version" + "_prepare_copy.jar").delete()
        Files.copy(file("build/libs/source-agent-$version" + "_prepare.jar").toPath(),
                file("build/libs/source-agent-$version" + "_prepare_copy.jar").toPath())
        def agentUri = URI.create("jar:file://" + file("build/libs/source-agent-$version" + "_prepare_copy.jar").absolutePath)
        def agentFilesystem
        try {
            agentFilesystem = FileSystems.newFileSystem(agentUri, ["create": "false"])
        } catch (all) {
            agentFilesystem = FileSystems.getFileSystem(agentUri)
        }

        Files.walkFileTree(agentFilesystem.getPath("/"), new SimpleFileVisitor<Path>() {
            @Override
            FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                if (file.toString().startsWith("/META-INF/") &&
                        !file.toString().startsWith("/META-INF/MANIFEST.MF") &&
                        !file.toString().startsWith("/META-INF/services/org.apache.skywalking.apm.agent.")) {
                    Files.delete(file)
                }
                //todo: remove this stuff if unnecessary
//                else if (file.toString().startsWith("/assets/") ||
//                        file.toString().startsWith("/common/") ||
//                        file.toString().startsWith("/junit/") ||
//                        file.toString().startsWith("/language-agent/") ||
//                        file.toString().startsWith("/language-agent-v2/") ||
//                        file.toString().startsWith("/register/") ||
//                        file.toString().startsWith("/service-mesh-probe/")) {
//                    Files.delete(file)
//                }
                if (file.toString() == "/LICENSE.txt" || file.toString() == "/LICENSE-junit.txt") {
                    Files.delete(file)
                }
                return FileVisitResult.CONTINUE
            }
        })
        agentFilesystem.close()
    }

    main = "-jar"
    args = [
            "jarjar-1.4.1.jar",
            "process",
            "jarjar_rules.txt",
            "build/libs/source-agent-$version" + "_prepare_copy.jar",
            "build/libs/source-agent-$version" + "_prepare_external.jar"
    ]
    doLast {
        file("build/libs/source-agent-$version" + "_prepare_copy.jar").delete()
    }
}

task buildAgent(type: proguard.gradle.ProGuardTask) {
    dependsOn "prepareExternalAgent"
    inputs.file file("build/libs/source-agent-$version" + "_prepare_external.jar")
    outputs.file file("build/libs/source-agent-$version" + ".jar")

    configuration 'proguard.txt'
    injars "build/libs/source-agent-$version" + "_prepare_external.jar"
    outjars "build/libs/source-agent-$version" + ".jar"
}

test {
    jvmArgs '-javaagent:../lib/source-agent-manifest.jar'

    dependsOn ":core:buildAndMove", ":core:startDocker"
    finalizedBy ":core:stopDocker"
}